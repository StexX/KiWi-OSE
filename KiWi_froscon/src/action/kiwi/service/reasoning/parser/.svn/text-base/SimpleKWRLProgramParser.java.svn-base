/* Generated By:JavaCC: Do not edit this line. SimpleKWRLProgramParser.java */
package kiwi.service.reasoning.parser;

import kiwi.service.reasoning.ast.*;


public class SimpleKWRLProgramParser implements SimpleKWRLProgramParserConstants {

  public static void main(String args[]) throws ParseException {
    SimpleKWRLProgramParser parser = new SimpleKWRLProgramParser(System.in);
    System.out.println("Enter a simple KWRL program:");
    try
    {
                Program program = parser.Program();

                System.out.println(program.toString());
        } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
        }
  }

//https://javacc.dev.java.net/doc/javaccgrm.html
//	If the label is preceded by a "#", then this regular expression may not be referred to from expansion units, but only from within other regular expressions. When the "#" is present, the regular expression is referred to as a "private regular expression". 
//  If the "#" is omitted, the token manager will erroneously recognize a string like E123 as a legal token of kind EXPONENT (instead of IDENTIFIER in the Java grammar).

// (([a-zA-Z][0-9a-zA-Z+\\-\\.]*:)?/{0,2}[0-9a-zA-Z;/?:@&=+$\\.\\-_!~*'()%]+)? (#[0-9a-zA-Z;/?:@&=+$\\.\\-_!~*'()%]+)?
// http://aspn.activestate.com/ASPN/Mail/Message/xml-dev/754445
  static final public Program Program() throws ParseException {
                     Program program = new Program(); int nullNameCount = 0; Namespace ns; Rule rule; Token name = null;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 23:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      ns = NamespaceDeclaration();
                                  program.addNamespace(ns);
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        name = jj_consume_token(IDENTIFIER);
        jj_consume_token(22);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      rule = Rule();
    if (name == null) {
        nullNameCount++;
        rule.setName(Rule.RULE_NAME_PREFIX + nullNameCount);
    } else {
        rule.setName(name.image);
    }

    program.addRule(rule); name=null; //it's declared above, once set it doesn't get cleared

      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case LEFTP:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(0);
    {if (true) return program;}
    throw new Error("Missing return statement in function");
  }

  static final public Namespace NamespaceDeclaration() throws ParseException {
                                   Namespace ns; Token prefix; Uri uri;
    jj_consume_token(23);
    prefix = jj_consume_token(IDENTIFIER);
    jj_consume_token(22);
    jj_consume_token(24);
    uri = Uri();
    jj_consume_token(25);
    {if (true) return new Namespace(prefix.image, uri.getUri());}
    throw new Error("Missing return statement in function");
  }

  static final public Rule Rule() throws ParseException {
                Body body; Head head;
    body = Body();
    jj_consume_token(THEN);
    head = Head();
    {if (true) return new Rule(body, head);}
    throw new Error("Missing return statement in function");
  }

  static final public Body Body() throws ParseException {
                Body body = new Body(); Formula formula;
    if (jj_2_1(2147483647)) {
      formula = FormulaWOParenthesis();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case LEFTP:
        formula = Formula();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    body.setFormula(formula); {if (true) return body;}
    throw new Error("Missing return statement in function");
  }

  static final public Head Head() throws ParseException {
                Head head = new Head(); Formula formula;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCONSISTENCY:
      jj_consume_token(INCONSISTENCY);
                            head.setInconsistency(new Inconsistency());
      break;
    default:
      jj_la1[4] = jj_gen;
      if (jj_2_2(2147483647)) {
        formula = HeadFormulaWOParenthesis();
                                                 head.setFormula(formula);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFTP:
          formula = HeadFormula();
                                    head.setFormula(formula);
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
          {if (true) return head;}
    throw new Error("Missing return statement in function");
  }

  static final public Formula FormulaWOParenthesis() throws ParseException {
                                   Formula formula;
    if (jj_2_4(2147483647)) {
      if (jj_2_3(2147483647)) {
        formula = Conjunction();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT:
        case LEFTP:
          formula = Disjunction();
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        formula = Negation();
        break;
      case LEFTP:
        formula = BodyTriplePattern();
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return formula;}
    throw new Error("Missing return statement in function");
  }

  static final public Formula Formula() throws ParseException {
                      Formula formula;
    if (jj_2_7(2)) {
      formula = BodyTriplePattern();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTP:
        jj_consume_token(LEFTP);
        if (jj_2_6(2147483647)) {
          formula = Conjunction();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NOT:
          case LEFTP:
            if (jj_2_5(2147483647)) {
              formula = Disjunction();
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case NOT:
              case LEFTP:
                formula = Formula();
                break;
              default:
                jj_la1[8] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            break;
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(RIGHTP);
        break;
      case NOT:
        formula = Negation();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return formula;}
    throw new Error("Missing return statement in function");
  }

  static final public Formula HeadFormula() throws ParseException {
                          Formula formula;
    jj_consume_token(LEFTP);
    formula = HeadConjunction();
    jj_consume_token(RIGHTP);
    {if (true) return formula;}
    throw new Error("Missing return statement in function");
  }

  static final public Formula HeadFormulaWOParenthesis() throws ParseException {
                                       Formula formula;
    formula = HeadConjunction();
    {if (true) return formula;}
    throw new Error("Missing return statement in function");
  }

  static final public Conjunction Conjunction() throws ParseException {
                               Conjunction conjunction = new Conjunction(); Formula formula;
    formula = Formula();
                        conjunction.addFormula(formula);
    label_3:
    while (true) {
      jj_consume_token(AND);
      formula = Formula();
                                                                                          conjunction.addFormula(formula);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_3;
      }
    }
    {if (true) return conjunction;}
    throw new Error("Missing return statement in function");
  }

  static final public Disjunction Disjunction() throws ParseException {
                               Disjunction disjunction = new Disjunction(); Formula formula;
    formula = Formula();
                        disjunction.addFormula(formula);
    label_4:
    while (true) {
      jj_consume_token(OR);
      formula = Formula();
                                                                                         disjunction.addFormula(formula);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
    }
    {if (true) return disjunction;}
    throw new Error("Missing return statement in function");
  }

  static final public Negation Negation() throws ParseException {
                       Formula formula;
    if (jj_2_8(2)) {
      jj_consume_token(NOT);
      formula = BodyTriplePattern();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
        formula = Formula();
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return new Negation(formula);}
    throw new Error("Missing return statement in function");
  }

  static final public Conjunction HeadConjunction() throws ParseException {
                                   Conjunction conjunction = new Conjunction(); TriplePattern triplePattern;
    triplePattern = HeadTriplePattern();
                                        conjunction.addFormula(triplePattern);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      jj_consume_token(AND);
      triplePattern = HeadTriplePattern();
                                                                                                                                conjunction.addFormula(triplePattern);
    }
    {if (true) return conjunction;}
    throw new Error("Missing return statement in function");
  }

  static final public TriplePattern BodyTriplePattern() throws ParseException {
                                     Term subject; Term property; Term object;
    jj_consume_token(LEFTP);
    subject = Subject();
    property = Property();
    object = Object();
    jj_consume_token(RIGHTP);
          {if (true) return new TriplePattern(subject, property, object);}
    throw new Error("Missing return statement in function");
  }

  static final public TriplePattern HeadTriplePattern() throws ParseException {
                                     Term subject; Term property; Term object;
    jj_consume_token(LEFTP);
    subject = HeadSubject();
    property = Property();
    object = HeadObject();
    jj_consume_token(RIGHTP);
          {if (true) return new TriplePattern(subject, property, object);}
    throw new Error("Missing return statement in function");
  }

  static final public Term HeadSubject() throws ParseException {
                       Uri uri = null; Variable variable = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case URI:
    case NS_URI:
      uri = Uri();
      break;
    case VARIABLE:
      variable = Variable();
      break;
    case URICONSTRUCTION:
      variable = ConstructionVariable();
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if (uri != null) {
                        {if (true) return uri;}
                }

                {if (true) return variable;}
    throw new Error("Missing return statement in function");
  }

  static final public Term Property() throws ParseException {
                    Uri uri = null; Variable variable = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case URI:
    case NS_URI:
      uri = Uri();
      break;
    case VARIABLE:
      variable = Variable();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if (uri != null)
                        {if (true) return uri;}

                {if (true) return variable;}
    throw new Error("Missing return statement in function");
  }

  static final public Term HeadObject() throws ParseException {
                      Uri uri = null; Variable variable = null; Literal literal = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case URI:
    case NS_URI:
      uri = Uri();
      break;
    case VARIABLE:
      variable = Variable();
      break;
    case URICONSTRUCTION:
      variable = ConstructionVariable();
      break;
    case STRLIT:
    case 26:
      literal = Literal();
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if (uri != null)
                        {if (true) return uri;}

                if (variable != null)
                        {if (true) return variable;}

                {if (true) return literal;}
    throw new Error("Missing return statement in function");
  }

  static final public Term Subject() throws ParseException {
                   Uri uri = null; Variable variable = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case URI:
    case NS_URI:
      uri = Uri();
      break;
    case VARIABLE:
      variable = Variable();
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if (uri != null)
                        {if (true) return uri;}

                if (variable != null)
                        {if (true) return variable;}
    throw new Error("Missing return statement in function");
  }

  static final public Term Object() throws ParseException {
                  Uri uri = null; Variable variable = null; Literal literal = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case URI:
    case NS_URI:
      uri = Uri();
      break;
    case VARIABLE:
      variable = Variable();
      break;
    case STRLIT:
    case 26:
      literal = Literal();
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if (uri != null)
                        {if (true) return uri;}

                if (variable != null)
                        {if (true) return variable;}

                {if (true) return literal;}
    throw new Error("Missing return statement in function");
  }

  static final public Uri Uri() throws ParseException {
              Token uri;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case URI:
      uri = jj_consume_token(URI);
      break;
    case NS_URI:
      uri = jj_consume_token(NS_URI);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return new Uri(uri.image);}
    throw new Error("Missing return statement in function");
  }

  static final public Variable Variable() throws ParseException {
                       Token t;
    t = jj_consume_token(VARIABLE);
      {if (true) return new Variable (t.image);}
    throw new Error("Missing return statement in function");
  }

//TODO language tags
  static final public Literal Literal() throws ParseException {
                     Token literal = null; Uri type = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRLIT:
      literal = jj_consume_token(STRLIT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPE:
        jj_consume_token(TYPE);
        type = Uri();
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      break;
    case 26:
      jj_consume_token(26);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   //have to remove the leading " character first
        if (type != null) {
                {if (true) return new TypedLiteral(literal.image.substring(1, literal.image.length()-1), type.getUri());}
        }

        {if (true) return new Literal(literal.image.substring(1, literal.image.length()-1));}
    throw new Error("Missing return statement in function");
  }

//http://www.engr.mun.ca/~theo/JavaCC-FAQ/javacc-faq-moz.htm 4.5, 4.6 lookahead, factoring the <VARIABLE> out in Object()
  static final public ConstructionVariable ConstructionVariable() throws ParseException {
                                                Token var = null; Uri uri = null;
    jj_consume_token(URICONSTRUCTION);
    jj_consume_token(LEFTP);
    uri = Uri();
    jj_consume_token(RIGHTP);
    jj_consume_token(27);
    var = jj_consume_token(VARIABLE);
        {if (true) return new ConstructionVariable(var.image, uri.getUri());}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(LEFTP)) return true;
    if (jj_3R_20()) return true;
    if (jj_3R_31()) return true;
    if (jj_3R_32()) return true;
    if (jj_scan_token(RIGHTP)) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) return true;
    }
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_3R_17()) return true;
    Token xsp;
    if (jj_3R_19()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_19()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(LEFTP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    if (jj_scan_token(RIGHTP)) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_3R_17()) return true;
    Token xsp;
    if (jj_3R_18()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) return true;
    }
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(TYPE)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(URICONSTRUCTION)) return true;
    if (jj_scan_token(LEFTP)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(RIGHTP)) return true;
    if (jj_scan_token(27)) return true;
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_scan_token(STRLIT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(LEFTP)) return true;
    if (jj_3R_33()) return true;
    if (jj_3R_31()) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(RIGHTP)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) return true;
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SimpleKWRLProgramParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x800000,0x100000,0x102400,0x2400,0x8000,0x2000,0x2400,0x2400,0x2400,0x2400,0x2400,0x100,0x200,0x400,0x100,0xf0000,0x70000,0x40f0040,0x70000,0x4070040,0x30000,0x1000,0x4000040,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[8];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SimpleKWRLProgramParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SimpleKWRLProgramParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SimpleKWRLProgramParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SimpleKWRLProgramParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SimpleKWRLProgramParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SimpleKWRLProgramParser(SimpleKWRLProgramParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SimpleKWRLProgramParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[28];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 28; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 8; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
